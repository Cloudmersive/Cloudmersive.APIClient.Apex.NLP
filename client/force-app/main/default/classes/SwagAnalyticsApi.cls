/*
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagAnalyticsApi {
    SwagClient client;

    public SwagAnalyticsApi(SwagClient client) {
        this.client = client;
    }

    public SwagAnalyticsApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Perform Profanity and Obscene Language Analysis and Detection on Text
     * Analyze input text using advanced Profanity and Obscene Language Analysis to determine if the input contains profane language.  Supports English language input.  Consumes 1-2 API calls per sentence.
     * @param input Input profanity analysis request (required)
     * @return SwagProfanityAnalysisResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagProfanityAnalysisResponse analyticsProfanity(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagProfanityAnalysisResponse) client.invoke(
            'POST', '/nlp-v2/analytics/profanity',
            (SwagProfanityAnalysisRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagProfanityAnalysisResponse.class
        );
    }
    /**
     * Perform Sentiment Analysis and Classification on Text
     * Analyze input text using advanced Sentiment Analysis to determine if the input is positive, negative, or neutral.  Supports English language input.  Consumes 1-2 API calls per sentence.
     * @param input Input sentiment analysis request (required)
     * @return SwagSentimentAnalysisResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSentimentAnalysisResponse analyticsSentiment(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSentimentAnalysisResponse) client.invoke(
            'POST', '/nlp-v2/analytics/sentiment',
            (SwagSentimentAnalysisRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagSentimentAnalysisResponse.class
        );
    }
    /**
     * Perform Subjectivity and Objectivity Analysis on Text
     * Analyze input text using advanced Subjectivity and Objectivity Language Analysis to determine if the input text is objective or subjective, and how much.  Supports English language input.  Consumes 1-2 API calls per sentence.
     * @param input Input subjectivity analysis request (required)
     * @return SwagSubjectivityAnalysisResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSubjectivityAnalysisResponse analyticsSubjectivity(Map<String, Object> params) {
        client.assertNotNull(params.get('input'), 'input');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSubjectivityAnalysisResponse) client.invoke(
            'POST', '/nlp-v2/analytics/subjectivity',
            (SwagSubjectivityAnalysisRequest) params.get('input'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'Apikey' },
            SwagSubjectivityAnalysisResponse.class
        );
    }
}
