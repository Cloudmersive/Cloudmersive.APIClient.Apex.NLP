/*
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Input to a similarity analysis operation
 */
public class SwagSimilarityAnalysisRequest implements Swagger.MappedProperties {
    /**
     * First text to analyze
     * @return textToAnalyze1
     */
    public String textToAnalyze1 { get; set; }

    /**
     * Second text to analyze
     * @return textToAnalyze2
     */
    public String textToAnalyze2 { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'TextToAnalyze1' => 'textToAnalyze1',
        'TextToAnalyze2' => 'textToAnalyze2'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagSimilarityAnalysisRequest getExample() {
        SwagSimilarityAnalysisRequest similarityAnalysisRequest = new SwagSimilarityAnalysisRequest();
        similarityAnalysisRequest.textToAnalyze1 = 'aeiou';
        similarityAnalysisRequest.textToAnalyze2 = 'aeiou';
        return similarityAnalysisRequest;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagSimilarityAnalysisRequest) {
            SwagSimilarityAnalysisRequest similarityAnalysisRequest = (SwagSimilarityAnalysisRequest) obj;
            return this.textToAnalyze1 == similarityAnalysisRequest.textToAnalyze1
                && this.textToAnalyze2 == similarityAnalysisRequest.textToAnalyze2;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (textToAnalyze1 == null ? 0 : System.hashCode(textToAnalyze1));
        hashCode = (17 * hashCode) + (textToAnalyze2 == null ? 0 : System.hashCode(textToAnalyze2));
        return hashCode;
    }
}

