/*
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Output of a profanity analysis operation
 */
public class SwagProfanityAnalysisResponse implements Swagger.MappedProperties {
    /**
     * True if the profanity detection operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * Profanity classification score between 0.0 and 1.0 where scores closer to zero have a low probability of being profane or contain obscene language, while scores close to 1.0 have a high probability of being profane or containing obscene language.  Values above 0.8 have a very high probability of being profane.
     * @return profanityScoreResult
     */
    public Double profanityScoreResult { get; set; }

    /**
     * Number of sentences in input text
     * @return sentenceCount
     */
    public Integer sentenceCount { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'ProfanityScoreResult' => 'profanityScoreResult',
        'SentenceCount' => 'sentenceCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagProfanityAnalysisResponse getExample() {
        SwagProfanityAnalysisResponse profanityAnalysisResponse = new SwagProfanityAnalysisResponse();
        profanityAnalysisResponse.successful = true;
        profanityAnalysisResponse.profanityScoreResult = 1.3579;
        profanityAnalysisResponse.sentenceCount = 123;
        return profanityAnalysisResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagProfanityAnalysisResponse) {
            SwagProfanityAnalysisResponse profanityAnalysisResponse = (SwagProfanityAnalysisResponse) obj;
            return this.successful == profanityAnalysisResponse.successful
                && this.profanityScoreResult == profanityAnalysisResponse.profanityScoreResult
                && this.sentenceCount == profanityAnalysisResponse.sentenceCount;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (profanityScoreResult == null ? 0 : System.hashCode(profanityScoreResult));
        hashCode = (17 * hashCode) + (sentenceCount == null ? 0 : System.hashCode(sentenceCount));
        return hashCode;
    }
}

