/*
 * nlpapiv2
 * The powerful Natural Language Processing APIs (v2) let you perform part of speech tagging, entity identification, sentence parsing, and much more to help you understand the meaning of unstructured text.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Output of a sentiment analysis operation
 */
public class SwagSentimentAnalysisResponse implements Swagger.MappedProperties {
    /**
     * True if the language detection operation was successful, false otherwise
     * @return successful
     */
    public Boolean successful { get; set; }

    /**
     * Classification of input text into a sentiment classification; possible values are "Positive", "Negative" or "Neutral"
     * @return sentimentClassificationResult
     */
    public String sentimentClassificationResult { get; set; }

    /**
     * Sentiment classification score between -1.0 and +1.0 where scores less than 0 are negative sentiment, scores greater than 0 are positive sentiment and scores close to 0 are neutral.  The greater the value deviates from 0.0 the stronger the sentiment, with +1.0 and -1.0 being maximum positive and negative sentiment, respectively.
     * @return sentimentScoreResult
     */
    public Double sentimentScoreResult { get; set; }

    /**
     * Number of sentences in input text
     * @return sentenceCount
     */
    public Integer sentenceCount { get; set; }

    private static final Map<String, String> propertyMappings = new Map<String, String>{
        'Successful' => 'successful',
        'SentimentClassificationResult' => 'sentimentClassificationResult',
        'SentimentScoreResult' => 'sentimentScoreResult',
        'SentenceCount' => 'sentenceCount'
    };

    public Map<String, String> getPropertyMappings() {
        return propertyMappings;
    }

    public static SwagSentimentAnalysisResponse getExample() {
        SwagSentimentAnalysisResponse sentimentAnalysisResponse = new SwagSentimentAnalysisResponse();
        sentimentAnalysisResponse.successful = true;
        sentimentAnalysisResponse.sentimentClassificationResult = 'aeiou';
        sentimentAnalysisResponse.sentimentScoreResult = 1.3579;
        sentimentAnalysisResponse.sentenceCount = 123;
        return sentimentAnalysisResponse;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof SwagSentimentAnalysisResponse) {
            SwagSentimentAnalysisResponse sentimentAnalysisResponse = (SwagSentimentAnalysisResponse) obj;
            return this.successful == sentimentAnalysisResponse.successful
                && this.sentimentClassificationResult == sentimentAnalysisResponse.sentimentClassificationResult
                && this.sentimentScoreResult == sentimentAnalysisResponse.sentimentScoreResult
                && this.sentenceCount == sentimentAnalysisResponse.sentenceCount;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (successful == null ? 0 : System.hashCode(successful));
        hashCode = (17 * hashCode) + (sentimentClassificationResult == null ? 0 : System.hashCode(sentimentClassificationResult));
        hashCode = (17 * hashCode) + (sentimentScoreResult == null ? 0 : System.hashCode(sentimentScoreResult));
        hashCode = (17 * hashCode) + (sentenceCount == null ? 0 : System.hashCode(sentenceCount));
        return hashCode;
    }
}

